#!/bin/bash

# Server setup script for slova-sveltekit deployment
# This script collects configuration and sets up the remote server

set -e

echo "Server setup for slova-sveltekit deployment"
echo "==========================================="
echo ""

# Check if config already exists
if [ -f "deploy.config.local.sh" ]; then
    echo "Configuration file deploy.config.local.sh already exists."
    read -p "Do you want to overwrite it? (y/N): " OVERWRITE
    if [[ ! $OVERWRITE =~ ^[Yy]$ ]]; then
        echo "Setup cancelled. Using existing configuration."
        exit 0
    fi
fi

# Interactive configuration
echo "Please provide the following configuration:"
echo ""

# Server configuration
read -p "Server IP address: " SERVER_HOST
if [ -z "$SERVER_HOST" ]; then
    echo "Error: Server IP address cannot be empty!"
    exit 1
fi

read -p "SSH username (default: root): " SERVER_USER
SERVER_USER=${SERVER_USER:-root}

read -p "Application name (default: slova-sveltekit): " APP_NAME
APP_NAME=${APP_NAME:-slova-sveltekit}

read -p "Deployment path (default: /app): " DEPLOY_PATH
DEPLOY_PATH=${DEPLOY_PATH:-/app}

# Database configuration
echo ""
echo "Database configuration:"
read -p "Database name (default: slova_production): " DB_NAME
DB_NAME=${DB_NAME:-slova_production}

read -p "Database user (default: slova_user): " DB_USER
DB_USER=${DB_USER:-slova_user}

read -s -p "Database password: " DB_PASS
echo ""
read -s -p "Confirm database password: " DB_PASS_CONFIRM
echo ""

if [ "$DB_PASS" != "$DB_PASS_CONFIRM" ]; then
    echo "Error: Passwords do not match!"
    exit 1
fi

if [ -z "$DB_PASS" ]; then
    echo "Error: Database password cannot be empty!"
    exit 1
fi

# Application configuration
echo ""
echo "Application configuration:"
read -p "Application port (default: 4173): " APP_PORT
APP_PORT=${APP_PORT:-4173}

read -p "Health check timeout in seconds (default: 30): " HEALTH_CHECK_TIMEOUT
HEALTH_CHECK_TIMEOUT=${HEALTH_CHECK_TIMEOUT:-30}

read -p "App start timeout in seconds (default: 10): " APP_START_TIMEOUT
APP_START_TIMEOUT=${APP_START_TIMEOUT:-10}

read -p "Number of backups to keep (default: 2): " KEEP_BACKUPS
KEEP_BACKUPS=${KEEP_BACKUPS:-2}

echo ""
echo "Configuration summary:"
echo "====================="
echo "Server IP: $SERVER_HOST"
echo "SSH User: $SERVER_USER"
echo "App Name: $APP_NAME"
echo "Deploy Path: $DEPLOY_PATH"
echo "Database name: $DB_NAME"
echo "Database user: $DB_USER"
echo "Database password: [hidden]"
echo "App Port: $APP_PORT"
echo "Health check timeout: $HEALTH_CHECK_TIMEOUT"
echo "App start timeout: $APP_START_TIMEOUT"
echo "Backups to keep: $KEEP_BACKUPS"
echo ""

read -p "Continue with this configuration? (y/N): " CONFIRM
if [[ ! $CONFIRM =~ ^[Yy]$ ]]; then
    echo "Setup cancelled."
    exit 0
fi

echo ""
echo "Testing SSH connection..."
if ! ssh -o ConnectTimeout=10 -o BatchMode=yes "$SERVER_USER@$SERVER_HOST" "echo 'SSH connection successful'" 2>/dev/null; then
    echo "Error: Cannot connect to server via SSH. Please check:"
    echo "1. Server IP address is correct"
    echo "2. SSH key is configured and has proper permissions"
    echo "3. SSH key is added to server's authorized_keys"
    echo "4. Server is accessible from your network"
    exit 1
fi

echo "SSH connection successful!"
echo ""

# Create local configuration file
echo "Creating local configuration file..."
cat > "deploy.config.local.sh" << EOF
#!/bin/bash

# Deployment configuration for slova-sveltekit
# Generated by server-setup.sh

# Server configuration
SERVER_HOST="$SERVER_HOST"
SERVER_USER="$SERVER_USER"
APP_NAME="$APP_NAME"
DEPLOY_PATH="$DEPLOY_PATH"

# Application configuration
APP_PORT="$APP_PORT"
HEALTH_CHECK_URL="http://localhost:$APP_PORT/api/health"

# Database configuration
DB_HOST="localhost"
DB_PORT="5432"
DB_NAME="$DB_NAME"
DB_USER="$DB_USER"
DB_PASS="$DB_PASS"

# Timeouts
HEALTH_CHECK_TIMEOUT="$HEALTH_CHECK_TIMEOUT"
APP_START_TIMEOUT="$APP_START_TIMEOUT"

# Backup configuration
KEEP_BACKUPS="$KEEP_BACKUPS"

# SSH options
SSH_OPTIONS="-o ConnectTimeout=10 -o BatchMode=yes"

# PM2 configuration
PM2_SCRIPT="bun"
PM2_ARGS="run preview"
EOF

echo "Configuration saved to deploy.config.local.sh"
echo ""

# Create a temporary file for the remote script
TEMP_SCRIPT=$(mktemp)
cat > "$TEMP_SCRIPT" << 'REMOTE_SCRIPT_EOF'
#!/bin/bash

# Server setup script for slova-sveltekit deployment
# This script runs on the remote server

set -e

echo "Setting up server for slova-sveltekit deployment..."
echo ""

# Get configuration from command line arguments
DB_NAME="$1"
DB_USER="$2"
DB_PASS="$3"
DEPLOY_PATH="$4"

if [ -z "$DB_NAME" ] || [ -z "$DB_USER" ] || [ -z "$DB_PASS" ] || [ -z "$DEPLOY_PATH" ]; then
    echo "Error: Missing required parameters"
    echo "Usage: $0 <db_name> <db_user> <db_pass> <deploy_path>"
    exit 1
fi

echo "Configuration received:"
echo "Database name: $DB_NAME"
echo "Database user: $DB_USER"
echo "Database password: [hidden]"
echo "Deploy path: $DEPLOY_PATH"
echo ""

echo "Starting server setup..."

# Update system
echo "Updating system packages..."
sudo apt update && sudo apt upgrade -y

# Install required packages
echo "Installing required packages..."
sudo apt install -y curl git nginx postgresql postgresql-contrib unzip npm

# Install bun
echo "Installing bun..."
curl -fsSL https://bun.sh/install | bash
source ~/.bashrc

# Install PM2 globally
echo "Installing PM2..."
sudo npm install -g pm2

# Create deployment directory
echo "Creating deployment directory..."
sudo mkdir -p "$DEPLOY_PATH"
sudo chown $USER:$USER "$DEPLOY_PATH"
mkdir -p "$DEPLOY_PATH/current" "$DEPLOY_PATH/previous" "$DEPLOY_PATH/deployments" "$DEPLOY_PATH/logs"

# Setup PostgreSQL
echo "Setting up PostgreSQL..."
sudo systemctl start postgresql
sudo systemctl enable postgresql

# Create database and user using provided values
echo "Creating database and user..."
sudo -u postgres psql << EOF
CREATE DATABASE $DB_NAME;
CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';
GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;
\q
EOF

# Create PM2 ecosystem file
echo "Creating PM2 ecosystem file..."
cat > "$DEPLOY_PATH/ecosystem.config.js" << 'EOF'
module.exports = {
  apps: [{
    name: 'slova-sveltekit',
    script: 'bun',
    args: 'run preview',
    cwd: '/app/current',
    env: {
      NODE_ENV: 'production',
      PORT: 4173
    },
    instances: 1,
    autorestart: true,
    watch: false,
    max_memory_restart: '1G',
    log_file: '/app/logs/combined.log',
    out_file: '/app/logs/out.log',
    error_file: '/app/logs/error.log',
    log_date_format: 'YYYY-MM-DD HH:mm:ss Z'
  }]
}
EOF

# Setup firewall (optional)
echo "Setting up firewall..."
sudo ufw allow ssh
sudo ufw allow 'Nginx Full'
sudo ufw --force enable

echo ""
echo "Server setup completed!"
echo ""
echo "Database configuration:"
echo "Database name: $DB_NAME"
echo "Database user: $DB_USER"
echo "Database password: [hidden]"
echo ""
echo "Next steps:"
echo "1. Update nginx configuration with your domain"
echo "2. Configure SSL with Let's Encrypt (recommended)"
echo "3. Create .env.production file with your production settings"
echo "4. Test deployment from your local machine"
echo ""
echo "Note: Save your database credentials securely!"
REMOTE_SCRIPT_EOF

echo "Uploading and executing setup script on remote server..."
echo ""

# Copy the script to the remote server and execute it with parameters
scp "$TEMP_SCRIPT" "$SERVER_USER@$SERVER_HOST:/tmp/server-setup.sh"
ssh -t "$SERVER_USER@$SERVER_HOST" "chmod +x /tmp/server-setup.sh && /tmp/server-setup.sh '$DB_NAME' '$DB_USER' '$DB_PASS' '$DEPLOY_PATH'"

# Clean up the temporary file
rm "$TEMP_SCRIPT"

echo ""
echo "Remote server setup completed!"
echo ""
echo "Configuration has been saved to deploy.config.local.sh"
echo "You can now proceed with deployment using the deploy.sh script." 